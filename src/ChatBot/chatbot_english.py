# -*- coding: utf-8 -*-
"""Chatbot-english

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rVI7y3ZWHA6SQjD7ChK0hNgU5PCrB0Pi
"""

import time

# Device data
devices = {}

# Profile presets
profiles = {
    "Eco-Conscious Profile": {
        "Description": "Users who prioritize sustainability and energy efficiency.",
        "Default Settings": {
            "Temperature": [
                "25°C when the ambient temperature is between 28-30°C.",
                "24°C when the ambient temperature is between 26-28°C.",
                "23°C when the ambient temperature is below 26°C."
            ],
            "Fan Speed": "Medium",
            "Automatic Shutdown": "When the ultrasonic sensor does not detect presence for more than 30 minutes."
        }
    },
    "Health and Well-being Profile": {
        "Description": "Users seeking health and well-being benefits.",
        "Default Settings": {
            "Temperature": "21°C regardless of ambient temperature.",
            "Fan Speed": "Low",
            "Mode": "Active dehumidification when humidity is above 70%.",
            "Alert": "CO2 and Formaldehyde activated (if the sensor is available).",
            "Automatic Adjustment": "Air distribution based on room size."
        }
    },
    "Work From Home Profile": {
        "Description": "Users who work or study from home.",
        "Default Settings": {
            "Temperature": [
                "24°C when the ambient temperature is above 27°C.",
                "23°C when the ambient temperature is between 24-27°C.",
                "22°C when the ambient temperature is below 24°C."
            ],
            "Fan Speed": "Medium during working hours (8am-6pm) and Low outside these hours.",
            "Automatic Adjustment": "Air distribution based on room size."
        }
    },
    "Maximum Comfort Profile": {
        "Description": "Users who prioritize maximum comfort.",
        "Default Settings": {
            "Temperature": "20°C regardless of ambient temperature.",
            "Fan Speed": "High",
            "Automatic Adjustment": "Air distribution based on room size."
        }
    },
    "Family Profile": {
        "Description": "Homes with multiple occupants.",
        "Default Settings": {
            "Temperature": [
                "25°C when the ambient temperature is above 28°C.",
                "24°C when the ambient temperature is between 26-28°C.",
                "23°C when the ambient temperature is below 26°C."
            ],
            "Fan Speed": "Medium during the day (8am-8pm) and Low during the night (8pm-8am).",
            "Automatic Adjustment": "Air distribution based on room size and occupancy."
        }
    },
    "Air Quality Profile (Only for premium module users)": {
        "Description": "Users who have the control module with CO2 and Formaldehyde sensor.",
        "Default Settings": {
            "Temperature": "23°C regardless of ambient temperature.",
            "Fan Speed": "Medium",
            "Mode": "Intensified ventilation when CO2 or Formaldehyde levels are high.",
            "Automatic Adjustment": "Air distribution based on room size."
        }
    }
}

# Chatbot functions

def authenticate():
    print("Authenticating...")
    time.sleep(1)
    print("Authentication successful!")
    return True

def name_device():
    type_ = input("Enter the type of room where the device is located (e.g., Bedroom, Living Room): ")
    name = input("Enter a name for the room where the device is located (e.g., Master Bedroom, Office): ")
    devices[name] = {'type': type_, 'on': False, 'temperature': 24, 'intensity': 'Medium', 'direction': 'Fixed'}
    print(f"Device '{name}' named successfully!")

def list_devices():
    print("\nNamed devices:")
    for name, data in devices.items():
        print(f"- {name} ({data['type']})")

def select_device():
    print("\nSelect a device to adjust:")
    for idx, name in enumerate(devices.keys(), 1):
        print(f"{idx}. {name}")
    choice = int(input("Enter the device number: "))
    device_name = list(devices.keys())[choice - 1]
    return device_name

def adjustment_options(device):
    print(f"\nAdjustment options for {device}:")
    print("1. Turn On/Off")
    print("2. Adjust temperature")
    print("3. Adjust wind intensity")
    print("4. Adjust wind direction")
    print("5. Air quality information")
    print("6. Choose preset")
    print("7. View details of predefined profiles")
    choice = int(input("Enter the desired option: "))
    return choice

def turn_on_off_device(device):
    if devices[device]['on']:
        devices[device]['on'] = False
        print(f"{device} has been turned off.")
    else:
        devices[device]['on'] = True
        print(f"{device} has been turned on.")

def adjust_temperature(device):
    current_temp = devices[device]['temperature']
    print(f"Current temperature: {current_temp}°C")
    new_temp = int(input("Enter the new temperature (16-25°C): "))
    if 16 <= new_temp <= 25:
        devices[device]['temperature'] = new_temp
        print(f"Temperature adjusted to {new_temp}°C.")
    else:
        print("Invalid temperature. Keeping the current temperature.")

def adjust_intensity(device):
    intensities = ["Low", "Medium", "High"]
    print(f"Current intensity: {devices[device]['intensity']}")
    for idx, intensity in enumerate(intensities, 1):
        print(f"{idx}. {intensity}")
    choice = int(input("Select the new intensity: "))
    if 1 <= choice <= 3:
        devices[device]['intensity'] = intensities[choice - 1]
        print(f"Intensity adjusted to {intensities[choice - 1]}.")
    else:
        print("Invalid choice. Keeping the current intensity.")

def adjust_direction(device):
    directions = ["Fixed", "Oscillating"]
    print(f"Current direction: {devices[device]['direction']}")
    for idx, direction in enumerate(directions, 1):
        print(f"{idx}. {direction}")
    choice = int(input("Select the new direction: "))
    if 1 <= choice <= 2:
        devices[device]['direction'] = directions[choice - 1]
        print(f"Direction adjusted to {directions[choice - 1]}.")
    else:
        print("Invalid choice. Keeping the current direction.")

def air_quality_info(device):
    # For simplicity, let's assume all devices have good air quality.
    print(f"Air quality in {device}: Good")

def choose_preset(device):
    for idx, profile in enumerate(profiles.keys(), 1):
        print(f"{idx}. {profile}")
    choice = int(input("Select the desired profile: "))
    if 1 <= choice <= len(profiles):

        print(f"{list(profiles.keys())[choice - 1]} profile selected.")
    else:
        print("Invalid choice.")

def profile_details():
    for profile, details in profiles.items():
        print(f"\n{profile}:")
        for key, value in details.items():
            if isinstance(value, dict):
                print(f"{key}:")
                for subkey, subvalue in value.items():
                    if isinstance(subvalue, list):
                        print(f"  {subkey}:")
                        for item in subvalue:
                            print(f"    - {item}")
                    else:
                        print(f"  {subkey}: {subvalue}")
            else:
                print(f"{key}: {value}")

def main_menu():
    while True:
        print("\nOptions:")
        print("1. Name device")
        if devices:
            print("2. List named devices")
            print("3. Adjust device")
        print("4. Exit")

        option = int(input("Enter the desired option: "))

        if option == 1:
            name_device()
        elif option == 2 and devices:
            list_devices()
        elif option == 3 and devices:
            selected_device = select_device()
            adjustment_option = adjustment_options(selected_device)
            if adjustment_option == 1:
                turn_on_off_device(selected_device)
            elif adjustment_option == 2:
                adjust_temperature(selected_device)
            elif adjustment_option == 3:
                adjust_intensity(selected_device)
            elif adjustment_option == 4:
                adjust_direction(selected_device)
            elif adjustment_option == 5:
                air_quality_info(selected_device)
            elif adjustment_option == 6:
                choose_preset(selected_device)
            elif adjustment_option == 7:
                profile_details()
        elif option == 4:
            print("Exiting...")
            break

# Start of the chatbot

authenticated = False

while not authenticated:
    authenticated = authenticate()

main_menu()